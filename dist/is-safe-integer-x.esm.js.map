{"version":3,"sources":["../src/is-safe-integer-x.js"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,gBAAP,MAA6B,kBAA7B;AAEA,IAAM,gBAAgB,GAAG,CAAC,gBAA1B;AAEA;;;;;;;;;;;;AAWA,IAAM,aAAa,GAAG,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAClD,SAAO,SAAS,CAAC,KAAD,CAAT,IAAoB,KAAK,IAAI,gBAA7B,IAAiD,KAAK,IAAI,gBAAjE;AACD,CAFD;;AAIA,eAAe,aAAf","file":"is-safe-integer-x.esm.js","sourcesContent":["import isInteger from 'is-integer-x';\nimport MAX_SAFE_INTEGER from 'max-safe-integer';\n\nconst MIN_SAFE_INTEGER = -MAX_SAFE_INTEGER;\n\n/**\n * This method determines whether the passed value is a safe integer.\n *\n * Can be exactly represented as an IEEE-754 double precision number, and\n * whose IEEE-754 representation cannot be the result of rounding any other\n * integer to fit the IEEE-754 representation.\n *\n * @param {*} value - The value to be tested for being a safe integer.\n * @returns {boolean} A Boolean indicating whether or not the given value is a\n *  safe integer.\n */\nconst isSafeInteger = function isSafeInteger(value) {\n  return isInteger(value) && value >= MIN_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n};\n\nexport default isSafeInteger;\n"]}